using System;
using System.ComponentModel;

namespace HTS.Serialization
{
    public class BekesyMeasurementSettings : BasicMeasurementConfiguration
    {
        [Category("Appearance")]
        public string Title { get; set; }
        private bool ShouldSerializeTitle() { return false; }

        [Category("Procedure")]
        [Description("Ears to test")]
        [DisplayName("Ears")]
        public Audiograms.TestEar TestEar { get; set; }
        private bool ShouldSerializeTestEar() { return false; }

        [Category("Procedure")]
        [Description("Test frequencies")]
        [DisplayName("Frequencies")]
        public float[] TestFrequencies { get; set; }
        private bool ShouldSerializeTestFrequencies() { return false; }

        [Category("Procedure")]
        [DisplayName("Num reversals")]
        public int NumReversals { get; set; }
        private bool ShouldSerializeNumReversals() { return false; }

        [Category("Procedure")]
        [DisplayName("Start level")]
        [Description("Track start level (dB HL)")]
        public float StartLevel { get; set; }
        private bool ShouldSerializeStartLevel() { return false; }
        
        [Category("Bookkeeping")]
        [Description("Merge data generated by this audiogram with the existing data on the tablet")]
        public bool Merge { set; get; }
        private bool ShouldSerializeMerge() { return false; }

        [Category("Stimulus")]
        [Description("Ramp applied to tones (ms)")]
        public float Ramp { set; get; }
        private bool ShouldSerializeRamp() { return false; }

        [Category("Stimulus")]
        [Description("Duration of tone (ms)")]
        public float ToneDuration { set; get; }
        private bool ShouldSerializeToneDuration() { return false; }

        [Category("Stimulus")]
        [Description("Controls the warble depth (in % of carrier)")]
        public float ModDepth { set; get; }
        private bool ShouldSerializeModDepth() { return false; }

        [Category("Stimulus")]
        [Description("Controls the warble rate (Hz)")]
        public float ModRate { set; get; }
        private bool ShouldSerializeModRate() { return false; }

        [Category("Stimulus")]
        [Description("Interval between pips (ms)")]
        [DisplayName("Pip interval")]
        public float IPI_ms { set; get; }
        private bool ShouldSerializeIPI_ms() { return false; }

        [Category("Stimulus")]
        public bool Continuous { set; get; }
        private bool ShouldSerializeContinuous() { return false; }

        [Category("Stimulus")]
        [Description("Rate of level change (dB / s)")]
        [DisplayName("Atten rate")]
        public float AttenuationRate { set; get; }
        private bool ShouldSerializeAttenuationRate() { return false; }

        public BekesyMeasurementSettings() : base()
        {
            Title = "The Softest Sound";

            TestEar = Audiograms.TestEar.Both;
            TestFrequencies = new float[] { 750, 1000, 1500, 2000, 3000, 4000, 8000, 125, 250, 500 };

            Merge = false;
            Ramp = 25f;
            ToneDuration = 1000f;
            IPI_ms = 50;
            ModDepth = 0;
            Continuous = true;
            AttenuationRate = 2.5f;
            NumReversals = 4;

            StartLevel = 50;
        }

    }
}
