using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing.Design;

using KLib;
//using KLib.Signals;
//using KLib.Signals.Enumerations;

namespace HTS.Serialization
{
    public class LDLMeasurementSettings : BasicMeasurementConfiguration
    {
        [Category("Appearance")]
        public string Title { get; set; }
        private bool ShouldSerializeTitle() { return false; }

        [Category("Appearance")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public string Prompt { get; set; }
        private bool ShouldSerializePrompt() { return false; }

        [Category("Appearance")]
        public int PromptFontSize {  get; set; }
        private bool ShouldSerializePromptFontSize() { return false; }

        [Category("Sequence")]
        [Description("Ears to test")]
        [DisplayName("Ears")]
        public Audiograms.TestEar TestEar { get; set; }
        private bool ShouldSerializeTestEar() { return false; }

        [Category("Sequence")]
        [Description("Test frequencies")]
        [DisplayName("Frequencies")]
        public float[] TestFrequencies { get; set; }
        private bool ShouldSerializeTestFrequencies() { return false; }

        [Category("Sequence")]
        [Description("Number of times to test each ear/frequency combo")]
        [DisplayName("Num repeats")]
        public int NumRepeats { get; set; }
        private bool ShouldSerializeNumRepeats() { return false; }

        [Category("Bookkeeping")]
        [Description("Merge data generated by this audiogram with the existing data on the tablet")]
        public bool Merge { set; get; }
        private bool ShouldSerializeMerge() { return false; }

        [Category("Stimulus")]
        [Description("Ramp applied to tones (ms)")]
        public float Ramp { set; get; }
        private bool ShouldSerializeRamp() { return false; }

        [Category("Stimulus")]
        [Description("Duration of tone (ms)")]
        public float ToneDuration { set; get; }
        private bool ShouldSerializeToneDuration() { return false; }

        //[Category("Stimulus")]
        //[Description("Level units")]
        //public LevelUnits LevelUnits { set; get; }
        //private bool ShouldSerializeLevelUnits() { return false; }

        [Category("Stimulus")]
        [Description("Pip interval (ms)")]
        [DisplayName("Pip interval")]
        public float ISI_ms { set; get; }
        private bool ShouldSerializeISI_ms() { return false; }

        [Category("Stimulus")]
        [Description("FM depth (percent)")]
        [DisplayName("FM depth")]
        public float ModDepth_pct {  set; get; }
        private bool ShouldSerializeModDepth_pct() { return false; } 

        [Category("Stimulus")]
        [Description("Minimum level")]
        [DisplayName("Min level")]
        public float MinLevel {  set; get; }

        public List<string> instructions = null;

        public LDLMeasurementSettings() : base()
        {
            Title = "How loud does it sound?";

            TestEar = Audiograms.TestEar.Both;
            TestFrequencies = new float[] { 1000, 2000, 4000 };

            Merge = true;
            Ramp = 5f;
            ToneDuration = 200;
            ISI_ms = 400;
            ModDepth_pct = 0;
            MinLevel = 10;
            //LevelUnits = LevelUnits.dB_SPL;
            NumRepeats = 3;

            Prompt = "Move sliders until sound is uncomfortable";
            PromptFontSize = 72;
        }

    }
}
